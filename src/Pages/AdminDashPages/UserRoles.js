import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  CircularProgress,
  Alert,
  Box,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Snackbar
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import AddIcon from '@mui/icons-material/Add';
import { roleAPI } from '../../Api/api';

const UserRoles = () => {
  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [addDialogOpen, setAddDialogOpen] = useState(false);
  const [currentRole, setCurrentRole] = useState({
    RoleID: '',
    RoleName: '',
    Description: ''
  });
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  useEffect(() => {
    fetchRoles();
  }, []);

  const fetchRoles = async () => {
    try {
      setLoading(true);
      const response = await roleAPI.getRoleList();
      if (response.data.success) {
        setRoles(response.data.data);
      } else {
        setError(response.data.message || 'Failed to fetch roles');
      }
    } catch (err) {
      setError(err.message || 'An error occurred while fetching roles');
    } finally {
      setLoading(false);
    }
  };

  const handleEditClick = (role) => {
    setCurrentRole({
      RoleID: role.RoleId,
      RoleName: role.RoleName,
      Description: role.Description
    });
    setEditDialogOpen(true);
  };

  const handleAddClick = () => {
    setCurrentRole({
      RoleID: '',
      RoleName: '',
      Description: ''
    });
    setAddDialogOpen(true);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentRole(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSave = async () => {
    try {
      // Validate required fields
      if (!currentRole.RoleName.trim()) {
        setSnackbar({
          open: true,
          message: 'Role Name is required',
          severity: 'error'
        });
        return;
      }

      // For new roles, RoleID should be empty (will be generated by the backend)
      const roleData = {
        RoleID: currentRole.RoleID || '0', // Assuming '0' or empty creates a new role
        RoleName: currentRole.RoleName,
        Description: currentRole.Description
      };

      const response = await roleAPI.updateRole(roleData);
      if (response.data.success) {
        setSnackbar({
          open: true,
          message: currentRole.RoleID ? 'Role updated successfully' : 'Role created successfully',
          severity: 'success'
        });
        fetchRoles();
        setEditDialogOpen(false);
        setAddDialogOpen(false);
      } else {
        setSnackbar({
          open: true,
          message: response.data.message || 'Failed to save role',
          severity: 'error'
        });
      }
    } catch (err) {
      setSnackbar({
        open: true,
        message: err.message || 'An error occurred while saving the role',
        severity: 'error'
      });
    }
  };

  const handleClose = () => {
    setEditDialogOpen(false);
    setAddDialogOpen(false);
  };

  const handleSnackbarClose = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ margin: 2 }}>
        {error}
      </Alert>
    );
  }

  return (
    <div style={{ padding: '20px' }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" gutterBottom>
          User Roles
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleAddClick}
        >
          Add New Role
        </Button>
      </Box>

      <TableContainer component={Paper} elevation={3}>
        <Table sx={{ minWidth: 650 }}>
          <TableHead sx={{ backgroundColor: '#f5f5f5' }}>
            <TableRow>
              <TableCell sx={{ fontWeight: 'bold' }}>Role ID</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }}>Role Name</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }}>Description</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }}>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {roles.map((role) => (
              <TableRow key={role.RoleId}>
                <TableCell>{role.RoleId}</TableCell>
                <TableCell>{role.RoleName}</TableCell>
                <TableCell>{role.Description || '-'}</TableCell>
                <TableCell>
                  <IconButton onClick={() => handleEditClick(role)}>
                    <EditIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Add New Role Dialog */}
      <Dialog open={addDialogOpen} onClose={handleClose}>
        <DialogTitle>Add New Role</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Role Name"
            name="RoleName"
            value={currentRole.RoleName}
            onChange={handleInputChange}
            fullWidth
            required
          />
          <TextField
            margin="dense"
            label="Description"
            name="Description"
            value={currentRole.Description}
            onChange={handleInputChange}
            fullWidth
            multiline
            rows={3}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSave} color="primary">Save</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Role Dialog */}
      <Dialog open={editDialogOpen} onClose={handleClose}>
        <DialogTitle>Edit Role</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Role ID"
            name="RoleID"
            value={currentRole.RoleID}
            fullWidth
            disabled
          />
          <TextField
            margin="dense"
            label="Role Name"
            name="RoleName"
            value={currentRole.RoleName}
            onChange={handleInputChange}
            fullWidth
            required
          />
          <TextField
            margin="dense"
            label="Description"
            name="Description"
            value={currentRole.Description}
            onChange={handleInputChange}
            fullWidth
            multiline
            rows={3}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSave} color="primary">Save</Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default UserRoles;